from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from events_bot.database.services import PostService, LikeService
from events_bot.bot.keyboards.main_keyboard import get_main_keyboard
from events_bot.bot.keyboards.feed_keyboard import get_feed_keyboard
from events_bot.storage import file_storage
from ..models import CategoryNames
import logfire

router = Router()
POSTS_PER_PAGE = 1

def register_feed_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–µ–Ω—Ç—ã"""
    dp.include_router(router)

def format_post_for_feed(post, current_position: int, total_posts: int, likes_count: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –ª–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    author_name = '–ê–Ω–æ–Ω–∏–º'
    if hasattr(post, 'author') and post.author is not None:
        author = post.author
        author_name = (getattr(author, 'first_name', None) or 
                     getattr(author, 'username', None) or '–ê–Ω–æ–Ω–∏–º')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_names = []
    if hasattr(post, 'categories') and post.categories is not None:
        category_names = [
            CategoryNames.get_text_name(cat.id) 
            for cat in post.categories
            if getattr(cat, 'id', None) is not None
        ]
    
    category_str = ', '.join(category_names) if category_names else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    published_at = getattr(post, 'published_at', None)
    published_str = published_at.strftime('%d.%m.%Y %H:%M') if published_at else ''
    
    return (
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        f"üìù *{post.title}*\n\n"
        f"{post.content}\n\n"
        f"üèôÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {post_city}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_str}\n"
        f"üìÖ {published_str}\n\n"
        f"üìä {current_position} –∏–∑ {total_posts} –ø–æ—Å—Ç–æ–≤\n"
        f"‚ù§Ô∏è {likes_count} —Å–µ—Ä–¥–µ—Ü"
    )

@router.message(F.text == "/feed")
async def cmd_feed(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feed"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É")
    await show_feed_page_cmd(message, 0, db)

@router.callback_query(F.data == "feed")
async def show_feed_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–Ω—Ç—É –ø–æ—Å—Ç–æ–≤"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É")
    await show_feed_page(callback, 0, db)

@router.callback_query(F.data.startswith("feed_"))
async def handle_feed_navigation(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–µ–Ω—Ç–µ"""
    data = callback.data.split("_")
    action = data[1]
    logfire.info(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–µ–Ω—Ç–µ: {action}")
    
    try:
        if action in ["prev", "next"]:
            current_page = int(data[2])
            new_page = current_page - 1 if action == "prev" else current_page + 1
            await show_feed_page(callback, new_page, db)
        elif action == "heart":
            post_id = int(data[2])
            await handle_post_heart(callback, post_id, db, data)
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
    await callback.answer()

async def show_feed_page_cmd(message: Message, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    posts = await PostService.get_feed_posts(
        db, message.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    
    if not posts:
        await message.answer(
            "üì≠ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            reply_markup=get_main_keyboard()
        )
        return
    
    post = posts[0]
    await db.refresh(post, attribute_names=["author", "categories"])
    
    is_liked = await LikeService.is_post_liked_by_user(db, message.from_user.id, post.id)
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    total_posts = await PostService.get_feed_posts_count(db, message.from_user.id)
    
    feed_text = format_post_for_feed(post, page + 1, total_posts, likes_count)
    
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            await message.answer_photo(
                photo=media_photo.media,
                caption=feed_text,
                reply_markup=get_feed_keyboard(page, (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE, 
                                             post.id, is_liked, likes_count),
                parse_mode="MarkdownV2"
            )
            return
    
    await message.answer(
        feed_text,
        reply_markup=get_feed_keyboard(page, (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE, 
                                     post.id, is_liked, likes_count),
        parse_mode="MarkdownV2"
    )

async def show_feed_page(callback: CallbackQuery, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã"""
    posts = await PostService.get_feed_posts(
        db, callback.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    
    if not posts:
        await callback.message.edit_text(
            "üì≠ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        return
    
    post = posts[0]
    await db.refresh(post, attribute_names=["author", "categories"])
    
    is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post.id)
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    total_posts = await PostService.get_feed_posts_count(db, callback.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    
    feed_text = format_post_for_feed(post, page + 1, total_posts, likes_count)
    
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=media_photo.media,
                    caption=feed_text,
                    parse_mode="MarkdownV2"
                ),
                reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count)
            )
            return
    
    await callback.message.edit_text(
        feed_text,
        reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count),
        parse_mode="MarkdownV2"
    )

async def handle_post_heart(callback: CallbackQuery, post_id: int, db, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤"""
    try:
        result = await LikeService.toggle_like(db, callback.from_user.id, post_id)
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if result["action"] == "added" else "—É–¥–∞–ª–µ–Ω–æ"
        
        await callback.answer(
            f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ {action_text}! ‚ù§Ô∏è {result['likes_count']}",
            show_alert=False
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_page = int(data[3])
        total_pages = int(data[4])
        is_liked = result["action"] == "added"
        
        await callback.message.edit_reply_markup(
            reply_markup=get_feed_keyboard(
                current_page,
                total_pages,
                post_id,
                is_liked,
                result["likes_count"]
            )
        )
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=False)

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()
